[main]
name="scene text recognition"
tf_manager=<tf_manager>
output="tests/outputs/str"
overwrite_output_dir=True
batch_size=4
epochs=2
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[("target_chars", evaluators.EditDistance)]
logging_period=1
validation_period=4
test_datasets=[<val_data>,<val_data_no_target>]
random_seed=1234

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
num_sessions=1

[image_reader]
class=readers.image_reader.image_reader
prefix="tests/data/str"
pad_h=32
pad_w=256
rescale_w=True
rescale_h=True
mode="F"
channels=1

[train_data]
class=dataset.load
series=["images", "target", "target_chars"]
data=[("tests/data/str/train_files.txt", <image_reader>), "tests/data/str/train_words.txt", (processors.helpers.preprocess_char_based, "target")]
buffer_size=10000

[val_data]
class=dataset.load
series=["images", "target", "target_chars"]
data=[("tests/data/str/val_files.txt", <image_reader>), "tests/data/str/val_words.txt", (processors.helpers.preprocess_char_based, "target")]

[val_data_no_target]
class=dataset.load
series=["images"]
data=[("tests/data/str/val_files.txt", <image_reader>)]

[cnn]
; https://arxiv.org/pdf/1603.03915.pdf
class=encoders.cnn_encoder.CNNEncoder
name="cnn"
data_id="images"
batch_normalize=True
image_height=32
image_width=256
pixel_dim=1
convolutions=[("C", 3, 1, "valid", 4),  ("M", 2, 2, "same"), ("R", 3, 12), ("A", 2, 1, "same")]
dropout_keep_prob=0.5

[cnn_in_time]
class=encoders.cnn_encoder.CNNTemporalView
name="cnn_in_time"
cnn=<cnn>

[encoder]
class=encoders.RecurrentEncoder
name="encoder"
input_sequence=<cnn_in_time>
rnn_size=256

[attention]
class=attention.Attention
name="attention_sentence_encoder"
encoder=<encoder>

[decoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/data/str/vocab.tsv"

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<encoder>]
attentions=[<attention>]
rnn_size=8
embedding_size=9
dropout_keep_prob=0.5
data_id="target_chars"
max_output_len=10
vocabulary=<decoder_vocabulary>

[trainer]
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
l2_weight=1.0e-8
clip_norm=1.0
optimizer=<adadelta>

[adadelta]
class=tf.train.AdadeltaOptimizer
learning_rate=1.0e-4
epsilon=1.0e-6
rho=0.95

[runner]
class=runners.GreedyRunner
decoder=<decoder>
output_series="target_chars"
