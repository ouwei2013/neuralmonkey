;; Small training test

[vars]
; testing variable substitution
parent_dir="tests/outputs"
output_dir="{parent_dir}/{NM_EXPERIMENT_NAME}"
drop_keep_p=0.5
dropout=$drop_keep_p
bleu=<bleu>

[main]
name="translation at {TIME} with {dropout:.2f} dropout"
output="{output_dir}"
overwrite_output_dir=True
batch_size=16
epochs=2
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[("target", $bleu), ("target", evaluators.TER), ("target", evaluators.ChrF3)]
logging_period=20
validation_period=60
random_seed=4321

[bleu]
class=evaluators.BLEUEvaluator
name="bleu"

[batching]
class=dataset.BatchingScheme
bucket_boundaries=[5, 10, 15, 20]
bucket_batch_sizes=[20, 15, 10, 5, 2]

[train_data]
class=dataset.load
series=["source", "target"]
data=["tests/data/train.tc.en", "tests/data/train.tc.de"]
batching=<batching>
buffer_size=48

[val_data]
class=dataset.load
series=["source", "target"]
data=["tests/data/val.tc.en", "tests/data/val.tc.de"]
batching=<batching>

[encoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/data/encoder_vocab.tsv"

[decoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/data/decoder_vocab.tsv"

[my_encoder]
class=encoders.SentenceEncoder
rnn_size=7
max_input_len=5
embedding_size=11
dropout_keep_prob=$drop_keep_p
data_id="source"
vocabulary=<encoder_vocabulary>
rnn_cell="NematusGRU"
embedding_initializer=<embedding_initializer>

[embedding_initializer]
class=tf.random_uniform_initializer
minval=-0.5
maxval=0.5

[my_attention]
class=attention.Attention
encoder=<my_encoder>
initializers=[("Attention/attn_query_projection", <query_projection_initializer>)]

[query_projection_initializer]
class=tf.random_normal_initializer
stddev=0.001

[my_decoder]
class=decoders.Decoder
conditional_gru=True
encoders=[<my_encoder>]
attentions=[<my_attention>]
rnn_size=8
embedding_size=9
dropout_keep_prob=$drop_keep_p
data_id="target"
max_output_len=1
vocabulary=<decoder_vocabulary>
attention_on_input=False
rnn_cell="NematusGRU"

[trainer]
class=trainers.CrossEntropyTrainer
decoders=[<my_decoder>]
l2_weight=1.0e-8
clip_norm=1.0

[runner]
class=runners.GreedyRunner
decoder=<my_decoder>
output_series="target"
